name: Semantic Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "action.yml"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

      - name: Update major version tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if a new release was created by checking if the latest commit has a tag
          if git describe --exact-match HEAD >/dev/null 2>&1; then
            # Get the new version tag
            NEW_VERSION=$(git describe --exact-match HEAD)
            MAJOR_VERSION=$(echo $NEW_VERSION | cut -d. -f1)
            
            echo "New release detected: $NEW_VERSION"
            echo "Updating major version tag: $MAJOR_VERSION"
            
            # Force update the major version tag
            git tag -f $MAJOR_VERSION
            git push origin $MAJOR_VERSION --force
          else
            echo "No new release detected"
          fi